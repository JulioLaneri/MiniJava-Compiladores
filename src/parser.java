
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import ast.*;
import java.util.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\025\000\002\004\003\000\002\004\004" +
    "\000\002\005\003\000\002\005\003\000\002\006\010\000" +
    "\002\007\012\000\002\010\003\000\002\013\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\015\006\000\002\016\002\000\002\016\004\000" +
    "\002\011\005\000\002\011\007\000\002\012\002\000\002" +
    "\012\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\102\000\004\006\006\001\002\000\004\002\104\001" +
    "\002\000\006\002\001\006\070\001\002\000\004\012\007" +
    "\001\002\000\004\066\010\001\002\000\026\005\ufff7\027" +
    "\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\056\ufff7\057\ufff7" +
    "\061\ufff7\063\ufff7\001\002\000\004\061\012\001\002\000" +
    "\004\006\013\001\002\000\004\007\014\001\002\000\004" +
    "\010\015\001\002\000\004\011\016\001\002\000\004\055" +
    "\017\001\002\000\004\066\010\001\002\000\004\057\021" +
    "\001\002\000\004\060\022\001\002\000\004\066\010\001" +
    "\002\000\004\056\024\001\002\000\004\061\025\001\002" +
    "\000\010\021\uffe9\062\uffe9\066\uffe9\001\002\000\010\021" +
    "\031\062\uffed\066\uffed\001\002\000\004\066\010\001\002" +
    "\000\010\021\uffe8\062\uffe8\066\uffe8\001\002\000\004\066" +
    "\ufff6\001\002\000\006\062\033\066\010\001\002\000\004" +
    "\062\056\001\002\000\006\062\uffec\066\uffec\001\002\000" +
    "\004\030\036\001\002\000\010\055\040\066\010\067\037" +
    "\001\002\000\016\027\ufff5\031\ufff5\032\ufff5\033\ufff5\056" +
    "\ufff5\063\ufff5\001\002\000\010\055\040\066\010\067\037" +
    "\001\002\000\014\027\044\031\047\032\045\033\046\063" +
    "\043\001\002\000\016\027\ufff4\031\ufff4\032\ufff4\033\ufff4" +
    "\056\ufff4\063\ufff4\001\002\000\006\062\uffee\066\uffee\001" +
    "\002\000\010\055\040\066\010\067\037\001\002\000\010" +
    "\055\040\066\010\067\037\001\002\000\010\055\040\066" +
    "\010\067\037\001\002\000\010\055\040\066\010\067\037" +
    "\001\002\000\016\027\ufff1\031\ufff1\032\ufff1\033\ufff1\056" +
    "\ufff1\063\ufff1\001\002\000\016\027\ufff0\031\ufff0\032\ufff0" +
    "\033\ufff0\056\ufff0\063\ufff0\001\002\000\016\027\ufff2\031" +
    "\047\032\ufff2\033\046\056\ufff2\063\ufff2\001\002\000\016" +
    "\027\ufff3\031\047\032\ufff3\033\046\056\ufff3\063\ufff3\001" +
    "\002\000\014\027\044\031\047\032\045\033\046\056\055" +
    "\001\002\000\016\027\uffef\031\uffef\032\uffef\033\uffef\056" +
    "\uffef\063\uffef\001\002\000\006\002\ufffe\006\ufffe\001\002" +
    "\000\006\030\060\063\061\001\002\000\010\055\040\066" +
    "\010\067\037\001\002\000\010\021\uffeb\062\uffeb\066\uffeb" +
    "\001\002\000\014\027\044\031\047\032\045\033\046\063" +
    "\063\001\002\000\010\021\uffea\062\uffea\066\uffea\001\002" +
    "\000\006\002\ufffd\006\ufffd\001\002\000\006\002\uffff\006" +
    "\070\001\002\000\006\002\ufffb\006\ufffb\001\002\000\006" +
    "\002\ufffa\006\ufffa\001\002\000\004\012\071\001\002\000" +
    "\004\066\010\001\002\000\006\005\074\061\073\001\002" +
    "\000\006\021\uffe9\062\uffe9\001\002\000\004\066\010\001" +
    "\002\000\004\061\076\001\002\000\006\021\uffe9\062\uffe9" +
    "\001\002\000\006\021\031\062\100\001\002\000\006\002" +
    "\ufff8\006\ufff8\001\002\000\006\021\031\062\102\001\002" +
    "\000\006\002\ufff9\006\ufff9\001\002\000\006\002\ufffc\006" +
    "\ufffc\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\102\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\012\004\064\005\063\006\065\007\066\001\001" +
    "\000\002\001\001\000\004\010\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\025\001\001\000\010\011\027\013\026" +
    "\016\031\001\001\000\004\010\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\034\015\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\041\014\040\001\001\000\002\001\001\000\006" +
    "\010\041\014\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\041\014\052\001\001" +
    "\000\006\010\041\014\051\001\001\000\006\010\041\014" +
    "\050\001\001\000\006\010\041\014\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\041\014\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\102\006\065\007\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\071\001\001\000\002\001\001\000\004\012\100\001" +
    "\001\000\004\010\074\001\001\000\002\001\001\000\004" +
    "\012\076\001\001\000\006\011\027\013\026\001\001\000" +
    "\002\001\001\000\006\011\027\013\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public void report_error(String message, Object info) {
        System.err.print(message);
        System.err.flush();
        if (info instanceof Symbol)
            if (((Symbol) info).left != -1)
                System.err.println(" at line " + ((Symbol) info).left + " of input");
            else
                System.err.println("");
        else
            System.err.println("");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Goal ::= MainClass 
            {
              Goal RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MainClass mc = (MainClass)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
               Goal g = new Goal(mc,new ClassDeclList(mcleft),mcleft);
               RESULT = g; 
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Goal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Goal start_val = (Goal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Goal ::= MainClass ClassDeclList 
            {
              Goal RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MainClass mc = (MainClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDeclList cdl = (ClassDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
               Goal g = new Goal(mc,cdl,mcleft);
               RESULT = g; 
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Goal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MainClass ::= PUBLIC CLASS Identifier O_CBRACKET PUBLIC STATIC VOID MAIN O_PAREN Identifier LBRACKET RBRACKET Identifier C_PAREN O_CBRACKET VarDeclList StatementList C_CBRACKET C_CBRACKET 
            {
              MainClass RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-16)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		VarDeclList vl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        RESULT = new MainClass(id, new Identifier("", idleft), vl, sl, idleft);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainClass",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassDeclList ::= ClassDecl 
            {
              ClassDeclList RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDecl cd = (ClassDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                ClassDeclList cdl = new ClassDeclList(cdleft);
                cdl.add(cd);
                RESULT = cdl; 
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassDeclList ::= ClassDeclList ClassDecl 
            {
              ClassDeclList RESULT =null;
		int cdlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cdlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassDeclList cdl = (ClassDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDecl cd = (ClassDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                    cdl.add(cd);
                    RESULT = cdl; 
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassDecl ::= ClassDeclSimple 
            {
              ClassDecl RESULT =null;
		int cdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDeclSimple cds = (ClassDeclSimple)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT = (ClassDecl)cds; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassDecl ::= ClassDeclExtends 
            {
              ClassDecl RESULT =null;
		int cdeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDeclExtends cde = (ClassDeclExtends)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    RESULT = (ClassDecl)cde; 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ClassDeclSimple ::= PUBLIC CLASS Identifier O_CBRACKET VarDeclList C_CBRACKET 
            {
              ClassDeclSimple RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclList vl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new ClassDeclSimple(id, vl, new MethodDeclList(idleft), idleft); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclSimple",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ClassDeclExtends ::= PUBLIC CLASS Identifier EXTENDS Identifier O_CBRACKET VarDeclList C_CBRACKET 
            {
              ClassDeclExtends RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier id2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclList vl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new ClassDeclExtends(id, id2, vl, new MethodDeclList(idleft), idleft); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclExtends",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Identifier ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(id, idleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Identifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= INT 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntType(ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= NUM 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntegerLiteral(n, nleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= Identifier 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierExpr(id.s, idleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(e1, e2, e1left); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(e1, e2, e1left); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Mult(e1, e2, e1left); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Div(e1, e2, e1left); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expr ::= O_PAREN Expr C_PAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statement ::= Identifier EQ Expr SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier id = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assign(id, e, idleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // StatementList ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // StatementList ::= StatementList Statement 
            {
              StatementList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList sl = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 sl.add(s); RESULT = sl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarDecl ::= Type Identifier SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new VarDeclSimple(t, i, tleft); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarDecl ::= Type Identifier EQ Expr SEMICOLON 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            RESULT = new VarDeclSimple(t, i, tleft); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarDeclList ::= 
            {
              VarDeclList RESULT =null;
		 
            RESULT = new VarDeclList(0); 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VarDeclList ::= VarDeclList VarDecl 
            {
              VarDeclList RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclList vl = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            vl.add(vd); RESULT = vl; 
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

import ast.*;
import java.util.*;
import java_cup.runtime.*;

/* Code in the following section is included in the generated parser */
parser code {:  
    public void report_error(String message, Object info) {
        System.err.print(message);
        System.err.flush();
        if (info instanceof Symbol)
            if (((Symbol) info).left != -1)
                System.err.println(" at line " + ((Symbol) info).left + " of input");
            else
                System.err.println("");
        else
            System.err.println("");
    }
:};  

/* Terminals (tokens returned by the scanner) */

/* reserved words: */
terminal PRINT, EXTENDS, PUBLIC, STATIC, VOID, MAIN, CLASS, IF, ELSE, WHILE, THIS, TRUE, FALSE, INT, NEW, LENGTH, RETURN, BOOLEAN, INTARRAY;

/* operators: */
terminal PLUS, EQ, TIMES, MINUS, DIV, MOD, LT, GT, EQEQ, NEQ, GTE, LTE, AND, OR, NOT,
        MODEQ, TIMESEQ, PLUSEQ, MINUSEQ, DIVEQ, INC, DEC;

/* delimiters: */
terminal O_PAREN, C_PAREN, LBRACKET, RBRACKET, O_CBRACKET, C_CBRACKET, SEMICOLON, COMMA, DOT;

/* tokens with values: */
terminal String IDENTIFIER;
terminal Integer NUM;




/* Nonterminals */
nonterminal Goal Goal;
nonterminal MainClass MainClass;
nonterminal ClassDeclList ClassDeclList;
nonterminal ClassDecl ClassDecl;
nonterminal ClassDeclSimple ClassDeclSimple;
nonterminal ClassDeclExtends ClassDeclExtends;
nonterminal Identifier Identifier;
nonterminal VarDecl VarDecl;
nonterminal VarDeclList VarDeclList;
nonterminal Type Type;
nonterminal Expr Expr;
nonterminal Statement Statement;
nonterminal StatementList StatementList;
nonterminal IdentifierExpr IdentifierExpr;



/* Precedence declarations */
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left EQ;

Goal ::= MainClass:mc
         {: 
               Goal g = new Goal(mc,new ClassDeclList(mcleft),mcleft);
               RESULT = g; 
         :}
        | MainClass:mc ClassDeclList:cdl
         {: 
               Goal g = new Goal(mc,cdl,mcleft);
               RESULT = g; 
         :};

MainClass ::= 
    PUBLIC CLASS Identifier:id O_CBRACKET 
    PUBLIC STATIC VOID MAIN O_PAREN Identifier LBRACKET RBRACKET Identifier C_PAREN 
    O_CBRACKET VarDeclList:vl StatementList:sl C_CBRACKET C_CBRACKET
    {:
        RESULT = new MainClass(id, new Identifier("", idleft), vl, sl, idleft);
    :};

ClassDeclList ::= ClassDecl:cd 
          {: 
                ClassDeclList cdl = new ClassDeclList(cdleft);
                cdl.add(cd);
                RESULT = cdl; 
          :}
                | ClassDeclList:cdl ClassDecl: cd
          {:  
                    cdl.add(cd);
                    RESULT = cdl; 
          :};
    
ClassDecl ::= ClassDeclSimple:cds
                {: 
                    RESULT = (ClassDecl)cds; 
                :}
               | ClassDeclExtends:cde
                {: 
                    RESULT = (ClassDecl)cde; 
                :};

ClassDeclSimple ::= PUBLIC CLASS Identifier:id O_CBRACKET VarDeclList:vl C_CBRACKET
        {: 
            RESULT = new ClassDeclSimple(id, vl, new MethodDeclList(idleft), idleft); 
        :};


ClassDeclExtends ::= PUBLIC CLASS Identifier:id EXTENDS Identifier:id2 O_CBRACKET VarDeclList:vl C_CBRACKET
        {: 
            RESULT = new ClassDeclExtends(id, id2, vl, new MethodDeclList(idleft), idleft); 
        :};


Identifier  ::= IDENTIFIER:id
                {: RESULT = new Identifier(id, idleft); :};
                
Type ::= INT:i
       {: RESULT = new IntType(ileft); :};
       
Expr ::= NUM:n
       {: RESULT = new IntegerLiteral(n, nleft); :}
       | Identifier:id
       {: RESULT = new IdentifierExpr(id.s, idleft); :};

Statement ::= Identifier:id EQ Expr:e SEMICOLON
           {: RESULT = new Assign(id, e, idleft); :};

StatementList ::= 
               {: RESULT = new StatementList(0); :}
               | StatementList:sl Statement:s
               {: sl.add(s); RESULT = sl; :};

               
VarDecl ::= Type:t Identifier:i SEMICOLON
        {: 
            RESULT = new VarDeclSimple(t, i, tleft); 
        :};
                
VarDeclList ::= 
        {: 
            RESULT = new VarDeclList(0); 
        :}
        | VarDeclList:vl VarDecl:vd
        {: 
            vl.add(vd); RESULT = vl; 
        :};
        
        